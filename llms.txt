# OpenSVM MCP Server - Solana RPC API

## What is this?

This MCP server provides programmatic access to the Solana blockchain through the OpenSVM API.
It exposes 31 tools covering transactions, accounts, blocks, tokens, NFTs, DeFi analytics, and direct RPC access.

## Quick Start

- **Base URL**: https://osvm.ai/api
- **Auth**: Set `OPENSVM_API_KEY` or `OPENSVM_JWT_TOKEN` environment variables
- **Transport**: MCP over stdio
- **Tools**: 31 available tools (see below)

## Key Capabilities

✅ **Transaction details** - `get_transaction` provides getParsedTransaction functionality
✅ **Batch operations** - `batch_transactions` fetches up to 20 transactions at once
✅ **Direct RPC access** - `solana_rpc_call` supports all 50+ Solana RPC methods
✅ **AI analysis** - `analyze_transaction` and `explain_transaction` for insights


## Available Tools (31 total)

### Transaction Tools (4)

**get_transaction** - Get detailed transaction with parsed instructions
- Params: signature (required, 87-88 chars)
- Endpoint: GET /transaction/{signature}
- Equivalent: Solana's getParsedTransaction

**batch_transactions** - Fetch multiple transactions at once
- Params: signatures[] (required, max 20), includeDetails (optional, default true)
- Endpoint: POST /transaction/batch
- Use: Efficient bulk transaction retrieval

**analyze_transaction** - AI-powered transaction analysis
- Params: signature (required), model (optional)
- Endpoint: GET /transaction/{signature}/analysis
- Returns: Transaction type, programs involved, token movements, risk assessment

**explain_transaction** - Natural language transaction explanation
- Params: signature (required), language (optional)
- Endpoint: GET /transaction/{signature}/explain
- Returns: Human-readable description of transaction actions

### Account Tools (4)

**get_account_stats** - Comprehensive account metrics
- Params: address (required, 32-44 chars)
- Endpoint: GET /account-stats/{address}
- Returns: Balances, token holdings, transaction count, activity history
- Equivalent: getAccountInfo + getBalance + getTokenAccountsByOwner

**get_account_transactions** - Account transaction history
- Params: address (required), limit (max 100), before (cursor), type (filter)
- Endpoint: GET /account-transactions/{address}
- Equivalent: getSignaturesForAddress + getTransaction

**get_account_token_stats** - Token-specific account statistics
- Params: address (required), mint (required)
- Endpoint: GET /account-token-stats/{address}/{mint}
- Returns: Token balance, transfer history

**check_account_type** - Identify account type
- Params: address (required)
- Endpoint: GET /check-account-type?address={address}
- Returns: wallet|program|token|nft|system

### Block Tools (3)

**get_block** - Get block by slot
- Params: slot (required)
- Endpoint: GET /blocks/{slot}
- Equivalent: getBlock

**get_recent_blocks** - List recent blocks
- Params: limit (default 20), before (slot for pagination)
- Endpoint: GET /blocks
- Equivalent: getBlocks

**get_block_stats** - Network block statistics
- Endpoint: GET /blocks/stats
- Returns: Block production rate, TPS, validator performance

### Search Tools (2)

**universal_search** - Search across all data types
- Params: query (required), type (account|transaction|token|program), start/end (ISO dates), status (success|failed), min/max (amounts)
- Endpoint: GET /search
- Use: Find transactions, accounts, tokens by various criteria

**search_accounts** - Account-focused search
- Params: query (required), tokenMint, minBalance, maxBalance
- Endpoint: GET /search/accounts
- Use: Find accounts with specific token holdings

### Analytics & DeFi Tools (4)

**get_defi_overview** - DeFi ecosystem metrics
- Endpoint: GET /analytics/overview
- Returns: TVL, volume, active users, protocol stats

**get_dex_analytics** - DEX trading analytics
- Params: dex (specific DEX), timeframe (1h|24h|7d)
- Endpoint: GET /analytics/dex
- Returns: Trading volume, liquidity, price data

**get_defi_health** - DeFi health indicators
- Endpoint: GET /analytics/defi-health
- Returns: Risk scores, protocol health, stability metrics

**get_validator_analytics** - Validator network stats
- Endpoint: GET /analytics/validators
- Returns: Performance, stake distribution, network health

### Token & NFT Tools (4)

**get_token_info** - Token details and metadata
- Params: address (mint address)
- Endpoint: GET /token/{address}
- Returns: Name, symbol, decimals, supply, holders, price
- Equivalent: getAccountInfo for token mint

**get_token_metadata** - Batch token metadata lookup
- Params: mints[] (array of mint addresses)
- Endpoint: GET /token-metadata?mints={comma-separated}
- Use: Get metadata for multiple tokens at once

**get_nft_collections** - List NFT collections
- Params: limit, sort (volume|floor|items)
- Endpoint: GET /nft-collections
- Returns: Collections with floor prices, volumes

**get_trending_nfts** - Trending NFT collections
- Endpoint: GET /nft-collections/trending
- Returns: Hot collections with momentum indicators

### User & Auth Tools (2)

**verify_wallet_signature** - Verify wallet signature for auth
- Params: message (required), signature (required), publicKey (required)
- Endpoint: POST /auth/verify
- Returns: Verification result, JWT token

**get_user_history** - User activity timeline
- Params: walletAddress (required), limit
- Endpoint: GET /user-history/{walletAddress}
- Returns: Transaction and interaction history

### Monetization Tools (3)

**get_balance** - Get SVMAI token balance
- Endpoint: GET /opensvm/balance
- Auth: Requires JWT
- Returns: Token balance, allowance

**get_usage_stats** - API usage and billing
- Endpoint: GET /opensvm/usage
- Returns: Request counts, costs, rate limits

**manage_api_keys** - API key management
- Params: action (list|create|delete), keyId (for delete), name (for create), permissions[] (for create)
- Endpoints: GET/POST/DELETE /opensvm/anthropic-keys
- Use: Create and manage API keys

### Infrastructure Tools (2)

**get_api_metrics** - API performance metrics
- Endpoint: GET /monitoring/api
- Returns: Response times, error rates, uptime

**report_error** - Submit error report
- Params: message (required), stack, url, userAgent
- Endpoint: POST /error-tracking
- Returns: Error tracking ID

### Program Registry Tools (2)

**get_program_registry** - List Solana programs
- Params: category (filter), verified (boolean)
- Endpoint: GET /program-registry
- Returns: Program directory with metadata

**get_program_info** - Program details
- Params: programId (required)
- Endpoint: GET /program-registry/{programId}
- Returns: Program metadata, instructions, usage stats

### Direct RPC Tool (1)

**solana_rpc_call** - Direct Solana RPC access
- Params: method (required), params[] (optional)
- Endpoint: POST /solana-rpc
- Use: Call any Solana RPC method directly
- Supports 50+ methods (see Solana RPC Methods section below)


## Solana RPC Methods Reference

All methods below can be called via **solana_rpc_call** tool.

### Transaction Methods
- `getParsedTransaction` - Get parsed transaction with detailed instruction breakdown
- `getTransaction` - Get raw transaction data  
- `getSignaturesForAddress` - Get all transaction signatures for an address
- `getSignatureStatuses` - Check status of transaction signatures
- `sendTransaction` - Submit a transaction to the cluster
- `simulateTransaction` - Simulate a transaction without committing

### Account Methods
- `getAccountInfo` - Get data and metadata for an account
- `getBalance` - Get SOL balance for an account
- `getMultipleAccounts` - Batch get multiple accounts
- `getProgramAccounts` - Get all accounts owned by a program
- `getTokenAccountBalance` - Get SPL token account balance
- `getTokenAccountsByOwner` - Get all token accounts for an owner
- `getTokenAccountsByDelegate` - Get token accounts by delegate

### Block Methods
- `getBlock` - Get a confirmed block with transaction data
- `getBlockHeight` - Get current block height
- `getBlocks` - Get list of confirmed blocks
- `getBlockTime` - Get estimated production time of a block
- `getFirstAvailableBlock` - Get slot of first available block
- `getBlockCommitment` - Get block commitment
- `getBlockProduction` - Get block production information

### Network & Cluster Methods
- `getClusterNodes` - Get information about cluster nodes
- `getEpochInfo` - Get current epoch information
- `getHealth` - Check if node is healthy
- `getVersion` - Get Solana version
- `getVoteAccounts` - Get vote account information
- `getIdentity` - Get node identity

### Token & Supply Methods
- `getTokenSupply` - Get total supply of a token
- `getTokenLargestAccounts` - Get largest accounts for a token
- `getSupply` - Get information about current supply

### Fee & Performance Methods
- `getFeeForMessage` - Estimate fee for a message
- `getRecentPrioritizationFees` - Get recent prioritization fees
- `getRecentPerformanceSamples` - Get recent performance samples
- `getMinimumBalanceForRentExemption` - Get minimum balance for rent exemption

### Validator & Staking Methods
- `getLeaderSchedule` - Get leader schedule
- `getStakeActivation` - Get stake activation info
- `getInflationRate` - Get current inflation rate
- `getInflationGovernor` - Get inflation governor config
- `getInflationReward` - Get inflation reward
- `getStakeMinimumDelegation` - Get minimum stake delegation

### Other Methods
- `getGenesisHash` - Get genesis hash
- `getLatestBlockhash` - Get latest blockhash
- `getSlot` - Get current slot
- `getSlotLeader` - Get current slot leader
- `getTransactionCount` - Get total transaction count
- `isBlockhashValid` - Check if blockhash is valid
- `requestAirdrop` - Request airdrop (testnet/devnet only)


## Usage Examples

### Get Transaction Details (getParsedTransaction)
```json
{
  "name": "get_transaction",
  "arguments": {
    "signature": "5VERv8NMvzbJMEkV8xnrLkEaWRtSz9CosKDYjCJjBRnbJLgp8uirBgmQpjKhoR4tjF3ZpRzrFmBV6UjKdiSZkQUW"
  }
}
```

Or use direct RPC:
```json
{
  "name": "solana_rpc_call",
  "arguments": {
    "method": "getParsedTransaction",
    "params": ["5VERv8...", {"encoding": "jsonParsed", "maxSupportedTransactionVersion": 0}]
  }
}
```

### Batch Fetch Transactions
```json
{
  "name": "batch_transactions",
  "arguments": {
    "signatures": ["sig1...", "sig2...", "sig3..."],
    "includeDetails": true
  }
}
```

### Get Account Token Holdings
```json
{
  "name": "solana_rpc_call",
  "arguments": {
    "method": "getTokenAccountsByOwner",
    "params": [
      "7BgBvyjrZX1YKz4oh9mjb8ZScatkkwb8DzFx7LoiVkM3",
      {"programId": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"},
      {"encoding": "jsonParsed"}
    ]
  }
}
```

### Search Transactions
```json
{
  "name": "universal_search",
  "arguments": {
    "query": "transfer",
    "type": "transaction",
    "status": "success",
    "start": "2024-01-01T00:00:00Z"
  }
}
```

## Common Patterns

### Analyzing a Transaction
1. Get transaction: `get_transaction` with signature
2. Explain: `explain_transaction` for natural language description
3. Analyze: `analyze_transaction` for AI insights

### Account Investigation
1. Get stats: `get_account_stats` for overview
2. Get transactions: `get_account_transactions` for history
3. Get token holdings: `get_account_token_stats` for specific token

### Token Research
1. Get info: `get_token_info` for metadata
2. Get holders: Use `solana_rpc_call` with `getProgramAccounts`
3. Get price: Included in `get_token_info` response


## Configuration

### Authentication
```bash
# API Key (set in environment)
export OPENSVM_API_KEY="your-api-key"

# Or JWT token
export OPENSVM_JWT_TOKEN="your-jwt-token"
```

### Error Handling
All tools return structured responses:
- Success: `{"content": [{"type": "text", "text": "<JSON data>"}]}`
- Error: `{"content": [{"type": "text", "text": "Error: <message>"}], "isError": true}`

Common errors:
- 400: Invalid parameters (check signature format, address length)
- 401: Missing or invalid authentication
- 404: Resource not found (transaction, account, block)
- 429: Rate limit exceeded
- 500: Internal server error

### Rate Limits
- Standard: 100 requests/minute
- Premium: 1000 requests/minute
- Batch operations count as 1 request
- WebSocket: 10 concurrent connections

## Best Practices

1. **Use batch operations** - `batch_transactions` instead of multiple `get_transaction` calls
2. **Cache results** - Transaction and block data is immutable once confirmed
3. **Use specific tools** - Prefer `get_transaction` over `solana_rpc_call` when available
4. **Validate inputs** - Signatures: 87-88 chars, Addresses: 32-44 chars
5. **Handle pagination** - Use `before` cursors for large result sets
6. **Monitor usage** - Use `get_usage_stats` to track API consumption

## Debugging

**Check tool availability:**
```json
{"name": "tools/list", "arguments": {}}
```

**Test connection:**
```json
{
  "name": "solana_rpc_call",
  "arguments": {"method": "getHealth", "params": []}
}
```

**Validate address:**
```json
{
  "name": "check_account_type",
  "arguments": {"address": "YourAddressHere"}
}
```

## Support

- Docs: https://osvm.ai/docs
- GitHub: https://github.com/openSVM/osvm-mcp
- Status: https://status.osvm.ai
