# OpenSVM MCP Server - Solana RPC API

**For LLMs:** This file documents all available tools and RPC methods for interacting with the Solana blockchain via OpenSVM API. Use this as a reference when helping users query blockchain data.

## Overview

- **Purpose**: Programmatic Solana blockchain access via MCP
- **Tools**: 31 specialized tools + direct RPC access to 50+ Solana methods
- **Transport**: MCP over stdio
- **Base URL**: https://osvm.ai/api
- **Auth**: `OPENSVM_API_KEY` or `OPENSVM_JWT_TOKEN` env vars

## Key Features

✅ `get_transaction` - getParsedTransaction equivalent with enhanced parsing
✅ `batch_transactions` - Batch fetch up to 20 transactions (1 API call)
✅ `solana_rpc_call` - Direct access to all standard Solana RPC methods
✅ `analyze_transaction` + `explain_transaction` - AI-powered insights


## Tools Reference (31 total)

### Transaction (4)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_transaction` | Parsed transaction details (= getParsedTransaction) | signature* | GET /transaction/{sig} |
| `batch_transactions` | Fetch up to 20 txs at once | signatures[]*, includeDetails | POST /transaction/batch |
| `analyze_transaction` | AI analysis: type, programs, tokens, risk | signature*, model | GET /transaction/{sig}/analysis |
| `explain_transaction` | Natural language explanation | signature*, language | GET /transaction/{sig}/explain |

### Account (4)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_account_stats` | Full metrics: balances, tokens, tx count | address* | GET /account-stats/{addr} |
| `get_account_transactions` | Transaction history w/ pagination | address*, limit, before, type | GET /account-transactions/{addr} |
| `get_account_token_stats` | Token-specific stats & transfers | address*, mint* | GET /account-token-stats/{addr}/{mint} |
| `check_account_type` | Classify: wallet/program/token/nft | address* | GET /check-account-type |

### Block (3)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_block` | Block data by slot | slot* | GET /blocks/{slot} |
| `get_recent_blocks` | List recent blocks w/ pagination | limit, before | GET /blocks |
| `get_block_stats` | Network stats: production rate, TPS | - | GET /blocks/stats |

### Search (2)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `universal_search` | Search across all types | query*, type, start/end, status, min/max | GET /search |
| `search_accounts` | Account search w/ balance filters | query*, tokenMint, minBalance, maxBalance | GET /search/accounts |

### Analytics & DeFi (4)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_defi_overview` | Ecosystem: TVL, volume, users, protocols | - | GET /analytics/overview |
| `get_dex_analytics` | DEX: volume, liquidity, prices | dex, timeframe | GET /analytics/dex |
| `get_defi_health` | Health: risk scores, protocol stability | - | GET /analytics/defi-health |
| `get_validator_analytics` | Validators: performance, stake | - | GET /analytics/validators |

### Token & NFT (4)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_token_info` | Token metadata: name, symbol, supply, price | address* (mint) | GET /token/{addr} |
| `get_token_metadata` | Batch token metadata (multiple mints) | mints[]* | GET /token-metadata |
| `get_nft_collections` | NFT collections w/ floor & volume | limit, sort | GET /nft-collections |
| `get_trending_nfts` | Trending NFT collections | - | GET /nft-collections/trending |

### User & Auth (2)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `verify_wallet_signature` | Verify signature, get JWT | message*, signature*, publicKey* | POST /auth/verify |
| `get_user_history` | User activity timeline | walletAddress*, limit | GET /user-history/{addr} |

### Monetization (3)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_balance` | SVMAI token balance (JWT required) | - | GET /opensvm/balance |
| `get_usage_stats` | API usage: requests, costs, limits | - | GET /opensvm/usage |
| `manage_api_keys` | Manage API keys: list/create/delete | action*, keyId, name, permissions[] | GET/POST/DELETE /opensvm/anthropic-keys |

### Infrastructure (2)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_api_metrics` | API health: latency, errors, uptime | - | GET /monitoring/api |
| `report_error` | Submit error report | message*, stack, url, userAgent | POST /error-tracking |

### Program Registry (2)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `get_program_registry` | List programs w/ filters | category, verified | GET /program-registry |
| `get_program_info` | Program details & instructions | programId* | GET /program-registry/{id} |

### Direct RPC (1)

| Tool | Purpose | Key Params | Endpoint |
|------|---------|------------|----------|
| `solana_rpc_call` | Call any Solana RPC method (50+ supported) | method*, params[] | POST /solana-rpc |

*Note: `*` indicates required parameter*


## Solana RPC Methods Reference

All methods below can be called via **solana_rpc_call** tool.

### Transaction Methods
- `getParsedTransaction` - Get parsed transaction with detailed instruction breakdown
- `getTransaction` - Get raw transaction data  
- `getSignaturesForAddress` - Get all transaction signatures for an address
- `getSignatureStatuses` - Check status of transaction signatures
- `sendTransaction` - Submit a transaction to the cluster
- `simulateTransaction` - Simulate a transaction without committing

### Account Methods
- `getAccountInfo` - Get data and metadata for an account
- `getBalance` - Get SOL balance for an account
- `getMultipleAccounts` - Batch get multiple accounts
- `getProgramAccounts` - Get all accounts owned by a program
- `getTokenAccountBalance` - Get SPL token account balance
- `getTokenAccountsByOwner` - Get all token accounts for an owner
- `getTokenAccountsByDelegate` - Get token accounts by delegate

### Block Methods
- `getBlock` - Get a confirmed block with transaction data
- `getBlockHeight` - Get current block height
- `getBlocks` - Get list of confirmed blocks
- `getBlockTime` - Get estimated production time of a block
- `getFirstAvailableBlock` - Get slot of first available block
- `getBlockCommitment` - Get block commitment
- `getBlockProduction` - Get block production information

### Network & Cluster Methods
- `getClusterNodes` - Get information about cluster nodes
- `getEpochInfo` - Get current epoch information
- `getHealth` - Check if node is healthy
- `getVersion` - Get Solana version
- `getVoteAccounts` - Get vote account information
- `getIdentity` - Get node identity

### Token & Supply Methods
- `getTokenSupply` - Get total supply of a token
- `getTokenLargestAccounts` - Get largest accounts for a token
- `getSupply` - Get information about current supply

### Fee & Performance Methods
- `getFeeForMessage` - Estimate fee for a message
- `getRecentPrioritizationFees` - Get recent prioritization fees
- `getRecentPerformanceSamples` - Get recent performance samples
- `getMinimumBalanceForRentExemption` - Get minimum balance for rent exemption

### Validator & Staking Methods
- `getLeaderSchedule` - Get leader schedule
- `getStakeActivation` - Get stake activation info
- `getInflationRate` - Get current inflation rate
- `getInflationGovernor` - Get inflation governor config
- `getInflationReward` - Get inflation reward
- `getStakeMinimumDelegation` - Get minimum stake delegation

### Other Methods
- `getGenesisHash` - Get genesis hash
- `getLatestBlockhash` - Get latest blockhash
- `getSlot` - Get current slot
- `getSlotLeader` - Get current slot leader
- `getTransactionCount` - Get total transaction count
- `isBlockhashValid` - Check if blockhash is valid
- `requestAirdrop` - Request airdrop (testnet/devnet only)


## Usage Examples

```json
// Get parsed transaction (getParsedTransaction equivalent)
{"name": "get_transaction", "arguments": {"signature": "5VERv8..."}}

// Batch fetch multiple transactions
{"name": "batch_transactions", "arguments": {"signatures": ["sig1...", "sig2..."]}}

// Direct RPC call
{"name": "solana_rpc_call", "arguments": {"method": "getParsedTransaction", "params": ["5VERv8...", {"encoding": "jsonParsed"}]}}

// Get account token holdings
{"name": "solana_rpc_call", "arguments": {"method": "getTokenAccountsByOwner", "params": ["7BgBv...", {"programId": "TokenkegQf..."}, {"encoding": "jsonParsed"}]}}

// Search transactions
{"name": "universal_search", "arguments": {"query": "transfer", "type": "transaction", "status": "success"}}
```

## Common Workflows

**Transaction Analysis**: `get_transaction` → `explain_transaction` → `analyze_transaction`
**Account Investigation**: `get_account_stats` → `get_account_transactions` → `get_account_token_stats`
**Token Research**: `get_token_info` → `solana_rpc_call(getProgramAccounts)` → price included in response


## Configuration & Limits

**Auth**: `export OPENSVM_API_KEY="key"` or `export OPENSVM_JWT_TOKEN="token"`
**Rate Limits**: 100 req/min (standard), 1000 req/min (premium), batch = 1 req
**Errors**: 400 (invalid params), 401 (auth), 404 (not found), 429 (rate limit), 500 (server)
**Response Format**: Success = `{"content": [{"type": "text", "text": "..."}]}`, Error adds `"isError": true`

## Best Practices

1. Use batch ops (`batch_transactions` vs multiple `get_transaction`)
2. Cache immutable data (confirmed transactions/blocks)
3. Prefer specific tools over `solana_rpc_call` when available
4. Validate inputs (signatures: 87-88 chars, addresses: 32-44 chars)
5. Use pagination (`before` cursors) for large datasets
6. Monitor usage with `get_usage_stats`

## Quick Tests

```json
// List all tools
{"name": "tools/list", "arguments": {}}

// Test connection
{"name": "solana_rpc_call", "arguments": {"method": "getHealth", "params": []}}

// Validate address
{"name": "check_account_type", "arguments": {"address": "YourAddressHere"}}
```

## Support

- Docs: https://osvm.ai/docs
- GitHub: https://github.com/openSVM/osvm-mcp
- Status: https://status.osvm.ai
